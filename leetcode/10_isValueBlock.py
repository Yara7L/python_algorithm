# 判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。

# 数字 1-9 在每一行只能出现一次。
# 数字 1-9 在每一列只能出现一次。
# 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。

# 下图是一个部分填充的有效的数独。
# 数独部分空格内已填入了数字，空白格用 '.' 表示。

# 示例 1:
# 输入:
# [
#   ["5","3",".",".","7",".",".",".","."],
#   ["6",".",".","1","9","5",".",".","."],
#   [".","9","8",".",".",".",".","6","."],
#   ["8",".",".",".","6",".",".",".","3"],
#   ["4",".",".","8",".","3",".",".","1"],
#   ["7",".",".",".","2",".",".",".","6"],
#   [".","6",".",".",".",".","2","8","."],
#   [".",".",".","4","1","9",".",".","5"],
#   [".",".",".",".","8",".",".","7","9"]
# ]
# 输出: true
# 示例 2:

# 输入:
# [
#   ["8","3",".",".","7",".",".",".","."],
#   ["6",".",".","1","9","5",".",".","."],
#   [".","9","8",".",".",".",".","6","."],
#   ["8",".",".",".","6",".",".",".","3"],
#   ["4",".",".","8",".","3",".",".","1"],
#   ["7",".",".",".","2",".",".",".","6"],
#   [".","6",".",".",".",".","2","8","."],
#   [".",".",".","4","1","9",".",".","5"],
#   [".",".",".",".","8",".",".","7","9"]
# ]
# 输出: false
# 解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
#      但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。

# # 说明:
# 一个有效的数独（部分已被填充）不一定是可解的。
# 只需要根据以上规则，验证已经填入的数字是否有效即可。
# 给定数独序列只包含数字 1-9 和字符 '.' 。
# 给定数独永远是 9x9 形式的。

class Solution:
    def isValueBlock(self,block):
        """
        :type block:list[list[str]]
        :rtype:boolean
        """
        for row in block:
            res=[]
            for x in row:
                if x in res:
                    print("Flase")
                    return False 
                    # break
                if x !='.':
                    res.append(x)

        global j 

        for i in range(9):
            res=[]
            for j in range(9):
                x=block[j][i]
                if x in res:
                    print("Flase")
                    return False
                    # break
                if x !='.':
                    res.append(x)

        for i in range(0, 9, 3):
            for j in range(0, 9, 3):
                res = []
                # grid = [block[i][j] for i in range(i, i + 3) for j in range(j,j+3)]
                grid = [block[i][j] for i in range(i, i + 3)]
                if x in res:
                    print("Flase")
                    return False
                    # break
                if x !='.':
                    res.append(x)
        print("True")

    # 不是很明白
    def isValueBlock_2(self,block):
        """
        :type block:list[list[str]]
        :rtype:boolean
        """
        Row, Col, Grid = [''] * 9, [''] * 9, [''] * 9
 
        for r_index, row in enumerate(block):
            for c_index, ch in enumerate(row):
                g_index = r_index // 3 * 3 + c_index // 3
                if ch != '.':
                    if ch in Row[r_index] or ch in Col[c_index] or ch in Grid[g_index]:
                        print("False")
                        return False
                    Row[r_index] += ch
                    Col[c_index] += ch
                    Grid[g_index] += ch
        
        print("True")
        return True
    

if __name__=="__main__":
    test=Solution()
    block=[
  ["5","3",".",".","7",".",".",".","."],
  ["6",".",".","1","9","5",".",".","."],
  [".","9","8",".",".",".",".","6","."],
  ["8",".",".",".","6",".",".",".","3"],
  ["4",".",".","8",".","3",".",".","1"],
  ["7",".",".",".","2",".",".",".","6"],
  [".","6",".",".",".",".","2","8","."],
  [".",".",".","4","1","9",".",".","5"],
  [".",".",".",".","8",".",".","7","9"]
]
    block2=[
  ["8","3",".",".","7",".",".",".","."],
  ["6",".",".","1","9","5",".",".","."],
  [".","9","8",".",".",".",".","6","."],
  ["8",".",".",".","6",".",".",".","3"],
  ["4",".",".","8",".","3",".",".","1"],
  ["7",".",".",".","2",".",".",".","6"],
  [".","6",".",".",".",".","2","8","."],
  [".",".",".","4","1","9",".",".","5"],
  [".",".",".",".","8",".",".","7","9"]
]
    test.isValueBlock(block)
    test.isValueBlock(block2)
    test.isValueBlock_2(block)
    test.isValueBlock_2(block2)